#! /usr/bin/env fontforge

# Run this Python script with FontForge to generate day_font.otf with
# the required subset of characters extracted from the source font.
# The subset is read from lang_characters.py, which was generated by
# make_lang.py.

import fontforge
import sys
import lang_characters
import os

# Attempt to determine the directory in which we're operating.
rootDir = os.path.dirname(__file__) or '.'
resourcesDir = rootDir

# I like ArchivoNarrow for its cleanliness, but it lacks some of the
# extended characters for Greek and Russion, so I supply the
# missing needed characters from DejaVuSans.
sourceFilenames = {
    'latin' : 'ArchivoNarrow-Bold.ttf',
    'extended' : 'DejaVuSansCondensed-Bold.ttf',
    'zh' : 'wqy-microhei.ttc',     # Chinese
    'ja' : 'TakaoPGothic.ttf',     # Japanese
    'ko' : 'UnDotum.ttf',          # Korean
    }

characters = {
    'latin' : lang_characters.characters_latin,
    'extended' : lang_characters.characters_extended,
    'zh' : lang_characters.characters_zh,
    'ja' : lang_characters.characters_ja,
    'ko' : lang_characters.characters_ko,
    }

for charset in characters.keys():
    selection = [('unicode', 'singletons')] + characters[charset]
    
    sourceFilename = sourceFilenames[charset]
    if sourceFilename[0] != '/':
        sourceFilename = '%s/%s' % (resourcesDir, sourceFilename)

    source = fontforge.open(sourceFilename)
    print source
    source.selection.select(*selection)

    source.selection.invert()
    source.clear()
    target = source

    #source.copy()
    #target = fontforge.font()
    #target.encoding = 'UnicodeBmp'
    #target.selection.select(*selection)
    #target.paste()

    print target
    targetFilename = '%s/day_font_%s.otf' % (resourcesDir, charset)
    target.generate(targetFilename)
