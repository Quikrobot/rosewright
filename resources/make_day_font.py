#! /usr/bin/env fontforge

# Run this Python script with FontForge to generate day_font.otf with
# the required subset of characters extracted from the source font.
# The subset is read from lang_characters.py, which was generated by
# make_lang.py.

import fontforge
import sys
import lang_characters
import os

# Attempt to determine the directory in which we're operating.
rootDir = os.path.dirname(__file__) or '.'
resourcesDir = rootDir

# I like ArchivoNarrow for its cleanliness, but it lacks some of the
# extended characters for Greek and Russion, so I supply the
# missing needed characters from Arial.
sourceFilenames = {
    'latin' : 'ArchivoNarrow-Bold.ttf',
    #'extended' : 'OpenSans-CondBold.ttf',
    'extended' : 'Arial Narrow Bold.ttf',
    }

characters = {
    'latin' : lang_characters.characters_latin,
    'extended' : lang_characters.characters_extended,
    }

for charset in ['latin', 'extended']:
    selection = [('unicode', 'singletons')] + characters[charset]

    sourceFilename = '%s/%s' % (resourcesDir, sourceFilenames[charset])

    source = fontforge.open(sourceFilename)
    print source
    source.selection.select(*selection)
    source.copy()

    target = fontforge.font()
    target.encoding = 'UnicodeBmp'

    target.selection.select(*selection)
    target.paste()

    print target
    targetFilename = '%s/day_font_%s.otf' % (resourcesDir, charset)
    target.generate(targetFilename)
